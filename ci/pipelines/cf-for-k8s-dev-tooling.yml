---
groups:
- name: long-lived-sli-cluster
  jobs:
  - create-long-lived-sli-cluster
  - destroy-long-lived-sli-cluster
- name: docker-images
  jobs:
  - build-cf-for-k8s-ci-image
  - build-cf-for-k8s-deplab-image
  - build-cf-for-k8s-gh-pages-image
  - build-cf-for-k8s-azure-image
  - build-cf-for-k8s-aws-image
  - build-cf-for-k8s-dind-image
  - build-cf-k8s-networking-integration-image
- name: rds-databases
  jobs:
  - create-rds-database
  - destroy-rds-database

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/**

- name: cf-for-k8s-ci-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/dockerfiles/cf-for-k8s-ci/Dockerfile

- name: cf-for-k8s-deplab-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/dockerfiles/cf-for-k8s-deplab/Dockerfile

- name: cf-for-k8s-gh-pages-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/dockerfiles/cf-for-k8s-gh-pages/Dockerfile

- name: cf-for-k8s-dind-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/dockerfiles/cf-for-k8s-dind/**

- name: cf-k8s-networking-integration-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/dockerfiles/cf-k8s-networking-integration/**

- name: cf-for-k8s-dind-image
  type: docker-image
  icon: docker
  source:
    repository: cloudfoundry/cf-for-k8s-dind
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-k8s-networking-integration-image
  type: docker-image
  icon: docker
  source:
    repository: cloudfoundry/cf-for-k8s-dind
    tag: cf-k8s-networking-integration
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: weekly
  type: time
  icon: clock-outline
  source:
    start: 7:00 -0700
    stop: 7:30 -0700
    interval: 168h

- name: cf-for-k8s-ci-image
  type: docker-image
  icon: docker
  source:
    repository: cloudfoundry/cf-for-k8s-ci
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-for-k8s-deplab-image
  type: docker-image
  icon: docker
  source:
    repository: cloudfoundry/cf-for-k8s-deplab
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-for-k8s-gh-pages-image
  type: docker-image
  icon: docker
  source:
    repository: cloudfoundry/cf-for-k8s-gh-pages
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: k14s-io
  type: git
  icon: github
  source:
    branch: develop
    uri: https://github.com/k14s/k14s.io.git
    paths:
    - pkg/website/templates/install.sh

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: cf-for-k8s-gke-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/gke/terraform/**

- name: cf-for-k8s-azure-image
  type: docker-image
  icon: docker
  source:
    repository: cloudfoundry/cf-for-k8s-azure
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-for-k8s-azure-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/dockerfiles/cf-for-k8s-azure/Dockerfile

- name: cf-for-k8s-aws-image
  type: docker-image
  icon: docker
  source:
    repository: cloudfoundry/cf-for-k8s-aws
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-for-k8s-aws-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/dockerfiles/cf-for-k8s-aws/Dockerfile

- name: terraform-rds
  type: terraform
  source:
    env_name: aws-rds
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: cf-for-k8s-rds-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/rds/terraform/**

x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: cloudfoundry/cf-for-k8s-ci

jobs:
- name: build-cf-for-k8s-ci-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-ci-dockerfile
        trigger: true
      - get: k14s-io
        trigger: true

    - put: cf-for-k8s-ci-image
      params:
        build: cf-for-k8s-ci-dockerfile/ci/dockerfiles/cf-for-k8s-ci/
        push: true

- name: build-cf-for-k8s-deplab-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-deplab-dockerfile
        trigger: true

    - put: cf-for-k8s-deplab-image
      params:
        build: cf-for-k8s-deplab-dockerfile/ci/dockerfiles/cf-for-k8s-deplab/
        push: true

- name: build-cf-for-k8s-gh-pages-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-gh-pages-dockerfile
        trigger: true

    - put: cf-for-k8s-gh-pages-image
      params:
        build: cf-for-k8s-gh-pages-dockerfile/ci/dockerfiles/cf-for-k8s-gh-pages/
        push: true

- name: build-cf-for-k8s-azure-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-azure-dockerfile
        trigger: true
      - get: k14s-io
        trigger: true

    - put: cf-for-k8s-azure-image
      params:
        build: cf-for-k8s-azure-dockerfile/ci/dockerfiles/cf-for-k8s-azure/
        push: true

- name: build-cf-for-k8s-aws-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-aws-dockerfile
        trigger: true
      - get: k14s-io
        trigger: true

    - put: cf-for-k8s-aws-image
      params:
        build: cf-for-k8s-aws-dockerfile/ci/dockerfiles/cf-for-k8s-aws/
        push: true

- name: build-cf-for-k8s-dind-image
  public: true
  plan:
    - timeout: 4h
      do:
        - in_parallel:
            - get: weekly
              trigger: true
            - get: cf-for-k8s-dind-dockerfile
              trigger: true

        - put: cf-for-k8s-dind-image
          params:
            build: cf-for-k8s-dind-dockerfile/ci/dockerfiles/cf-for-k8s-dind/
            push: true

- name: build-cf-k8s-networking-integration-image
  public: true
  plan:
    - timeout: 4h
      do:
        - in_parallel:
            - get: weekly
              trigger: true
            - get: cf-k8s-networking-integration-dockerfile
              trigger: true

        - put: cf-k8s-networking-integration-image
          params:
            build: cf-k8s-networking-integration-dockerfile/ci/dockerfiles/cf-k8s-networking-integration/
            push: true

- name: create-long-lived-sli-cluster
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-gke-terraform-templates

  - task: create-tf-vars-file
    config:
      <<: *common-task-config
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "long-lived-sli" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

- name: destroy-long-lived-sli-cluster
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-gke-terraform-templates
    - get: cf-for-k8s-ci

  - task: create-tf-vars-file
    config:
      <<: *common-task-config
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "long-lived-sli" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      action: destroy
      var_files: [ tf-vars/input.tfvars ]
    get_params:
      action: destroy

- name: create-rds-database
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-rds-terraform-templates

  - task: create-rds-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-rds-tf-vars-file/task.yml
    params:
      AWS_ACCESS_KEY_ID: ((ci_k8s_aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((ci_k8s_aws_secret_access_key))
      DATABASE_PASSWORD: ((ci_k8s_aws_rds_database_password))
      AWS_REGION: ((ci_k8s_aws_region))

  - put: terraform-rds
    params:
      terraform_source: cf-for-k8s-rds-terraform-templates/deploy/rds/terraform
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - task: dump-rds-address
    config:
      <<: *common-task-config
      inputs:
      - name: terraform-rds
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cat  terraform-rds/metadata
          echo "rds address: $(jq -r '.address' terraform-rds/metadata)"

- name: destroy-rds-database
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-rds-terraform-templates

  - task: create-rds-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-rds-tf-vars-file/task.yml
    params:
      AWS_ACCESS_KEY_ID: ((ci_k8s_aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((ci_k8s_aws_secret_access_key))
      DATABASE_PASSWORD: ((ci_k8s_aws_rds_database_password))
      AWS_REGION: ((ci_k8s_aws_region))

  - put: terraform-rds
    params:
      terraform_source: cf-for-k8s-rds-terraform-templates/deploy/rds/terraform
      var_files: [tf-vars/input.tfvars]
      action: destroy
    get_params:
      action: destroy
