// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/handlers"
	"code.cloudfoundry.org/korifi/api/payloads"
	"code.cloudfoundry.org/korifi/api/repositories"
	"github.com/go-logr/logr"
)

type AppLogsReader struct {
	ReadStub        func(context.Context, logr.Logger, authorization.Info, string, payloads.LogRead) ([]repositories.LogRecord, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 authorization.Info
		arg4 string
		arg5 payloads.LogRead
	}
	readReturns struct {
		result1 []repositories.LogRecord
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 []repositories.LogRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AppLogsReader) Read(arg1 context.Context, arg2 logr.Logger, arg3 authorization.Info, arg4 string, arg5 payloads.LogRead) ([]repositories.LogRecord, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		arg1 context.Context
		arg2 logr.Logger
		arg3 authorization.Info
		arg4 string
		arg5 payloads.LogRead
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ReadStub
	fakeReturns := fake.readReturns
	fake.recordInvocation("Read", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.readMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AppLogsReader) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *AppLogsReader) ReadCalls(stub func(context.Context, logr.Logger, authorization.Info, string, payloads.LogRead) ([]repositories.LogRecord, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *AppLogsReader) ReadArgsForCall(i int) (context.Context, logr.Logger, authorization.Info, string, payloads.LogRead) {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	argsForCall := fake.readArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *AppLogsReader) ReadReturns(result1 []repositories.LogRecord, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 []repositories.LogRecord
		result2 error
	}{result1, result2}
}

func (fake *AppLogsReader) ReadReturnsOnCall(i int, result1 []repositories.LogRecord, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 []repositories.LogRecord
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 []repositories.LogRecord
		result2 error
	}{result1, result2}
}

func (fake *AppLogsReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AppLogsReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.AppLogsReader = new(AppLogsReader)
