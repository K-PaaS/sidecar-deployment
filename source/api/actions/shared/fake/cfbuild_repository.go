// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/actions/shared"
	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/repositories"
)

type CFBuildRepository struct {
	GetBuildLogsStub        func(context.Context, authorization.Info, string, string) ([]repositories.LogRecord, error)
	getBuildLogsMutex       sync.RWMutex
	getBuildLogsArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
	}
	getBuildLogsReturns struct {
		result1 []repositories.LogRecord
		result2 error
	}
	getBuildLogsReturnsOnCall map[int]struct {
		result1 []repositories.LogRecord
		result2 error
	}
	GetLatestBuildByAppGUIDStub        func(context.Context, authorization.Info, string, string) (repositories.BuildRecord, error)
	getLatestBuildByAppGUIDMutex       sync.RWMutex
	getLatestBuildByAppGUIDArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
	}
	getLatestBuildByAppGUIDReturns struct {
		result1 repositories.BuildRecord
		result2 error
	}
	getLatestBuildByAppGUIDReturnsOnCall map[int]struct {
		result1 repositories.BuildRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFBuildRepository) GetBuildLogs(arg1 context.Context, arg2 authorization.Info, arg3 string, arg4 string) ([]repositories.LogRecord, error) {
	fake.getBuildLogsMutex.Lock()
	ret, specificReturn := fake.getBuildLogsReturnsOnCall[len(fake.getBuildLogsArgsForCall)]
	fake.getBuildLogsArgsForCall = append(fake.getBuildLogsArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetBuildLogsStub
	fakeReturns := fake.getBuildLogsReturns
	fake.recordInvocation("GetBuildLogs", []interface{}{arg1, arg2, arg3, arg4})
	fake.getBuildLogsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFBuildRepository) GetBuildLogsCallCount() int {
	fake.getBuildLogsMutex.RLock()
	defer fake.getBuildLogsMutex.RUnlock()
	return len(fake.getBuildLogsArgsForCall)
}

func (fake *CFBuildRepository) GetBuildLogsCalls(stub func(context.Context, authorization.Info, string, string) ([]repositories.LogRecord, error)) {
	fake.getBuildLogsMutex.Lock()
	defer fake.getBuildLogsMutex.Unlock()
	fake.GetBuildLogsStub = stub
}

func (fake *CFBuildRepository) GetBuildLogsArgsForCall(i int) (context.Context, authorization.Info, string, string) {
	fake.getBuildLogsMutex.RLock()
	defer fake.getBuildLogsMutex.RUnlock()
	argsForCall := fake.getBuildLogsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CFBuildRepository) GetBuildLogsReturns(result1 []repositories.LogRecord, result2 error) {
	fake.getBuildLogsMutex.Lock()
	defer fake.getBuildLogsMutex.Unlock()
	fake.GetBuildLogsStub = nil
	fake.getBuildLogsReturns = struct {
		result1 []repositories.LogRecord
		result2 error
	}{result1, result2}
}

func (fake *CFBuildRepository) GetBuildLogsReturnsOnCall(i int, result1 []repositories.LogRecord, result2 error) {
	fake.getBuildLogsMutex.Lock()
	defer fake.getBuildLogsMutex.Unlock()
	fake.GetBuildLogsStub = nil
	if fake.getBuildLogsReturnsOnCall == nil {
		fake.getBuildLogsReturnsOnCall = make(map[int]struct {
			result1 []repositories.LogRecord
			result2 error
		})
	}
	fake.getBuildLogsReturnsOnCall[i] = struct {
		result1 []repositories.LogRecord
		result2 error
	}{result1, result2}
}

func (fake *CFBuildRepository) GetLatestBuildByAppGUID(arg1 context.Context, arg2 authorization.Info, arg3 string, arg4 string) (repositories.BuildRecord, error) {
	fake.getLatestBuildByAppGUIDMutex.Lock()
	ret, specificReturn := fake.getLatestBuildByAppGUIDReturnsOnCall[len(fake.getLatestBuildByAppGUIDArgsForCall)]
	fake.getLatestBuildByAppGUIDArgsForCall = append(fake.getLatestBuildByAppGUIDArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetLatestBuildByAppGUIDStub
	fakeReturns := fake.getLatestBuildByAppGUIDReturns
	fake.recordInvocation("GetLatestBuildByAppGUID", []interface{}{arg1, arg2, arg3, arg4})
	fake.getLatestBuildByAppGUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFBuildRepository) GetLatestBuildByAppGUIDCallCount() int {
	fake.getLatestBuildByAppGUIDMutex.RLock()
	defer fake.getLatestBuildByAppGUIDMutex.RUnlock()
	return len(fake.getLatestBuildByAppGUIDArgsForCall)
}

func (fake *CFBuildRepository) GetLatestBuildByAppGUIDCalls(stub func(context.Context, authorization.Info, string, string) (repositories.BuildRecord, error)) {
	fake.getLatestBuildByAppGUIDMutex.Lock()
	defer fake.getLatestBuildByAppGUIDMutex.Unlock()
	fake.GetLatestBuildByAppGUIDStub = stub
}

func (fake *CFBuildRepository) GetLatestBuildByAppGUIDArgsForCall(i int) (context.Context, authorization.Info, string, string) {
	fake.getLatestBuildByAppGUIDMutex.RLock()
	defer fake.getLatestBuildByAppGUIDMutex.RUnlock()
	argsForCall := fake.getLatestBuildByAppGUIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CFBuildRepository) GetLatestBuildByAppGUIDReturns(result1 repositories.BuildRecord, result2 error) {
	fake.getLatestBuildByAppGUIDMutex.Lock()
	defer fake.getLatestBuildByAppGUIDMutex.Unlock()
	fake.GetLatestBuildByAppGUIDStub = nil
	fake.getLatestBuildByAppGUIDReturns = struct {
		result1 repositories.BuildRecord
		result2 error
	}{result1, result2}
}

func (fake *CFBuildRepository) GetLatestBuildByAppGUIDReturnsOnCall(i int, result1 repositories.BuildRecord, result2 error) {
	fake.getLatestBuildByAppGUIDMutex.Lock()
	defer fake.getLatestBuildByAppGUIDMutex.Unlock()
	fake.GetLatestBuildByAppGUIDStub = nil
	if fake.getLatestBuildByAppGUIDReturnsOnCall == nil {
		fake.getLatestBuildByAppGUIDReturnsOnCall = make(map[int]struct {
			result1 repositories.BuildRecord
			result2 error
		})
	}
	fake.getLatestBuildByAppGUIDReturnsOnCall[i] = struct {
		result1 repositories.BuildRecord
		result2 error
	}{result1, result2}
}

func (fake *CFBuildRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuildLogsMutex.RLock()
	defer fake.getBuildLogsMutex.RUnlock()
	fake.getLatestBuildByAppGUIDMutex.RLock()
	defer fake.getLatestBuildByAppGUIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFBuildRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shared.CFBuildRepository = new(CFBuildRepository)
