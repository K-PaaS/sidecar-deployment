#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:json", "json")

#@ if data.values.remove_resource_requirements:
#! remove resource requirements to allow installation on smaller environments
#@ for/end kind in ["Deployment", "DaemonSet", "StatefulSet", "Job"]:
#@overlay/match by=overlay.subset({"kind": kind}),expects="0+"
---
spec:
  template:
    #@overlay/match missing_ok=True
    metadata:
      #@overlay/match missing_ok=True
      annotations:
        #@overlay/match missing_ok=True
        sidecar.istio.io/proxyCPU: "0m"
        #@overlay/match missing_ok=True
        sidecar.istio.io/proxyMemory: "0M"
    spec:
      containers:
      #@overlay/match by=overlay.all,expects="1+"
      -
        #@overlay/remove
        #@overlay/match missing_ok=True
        resources:

#@ def remove_proxy_init_resources():
global:
  proxy_init: 
  #@overlay/remove
    resources:
#@ end

#@overlay/match by=overlay.subset({"kind":"ConfigMap","metadata":{"name":"istio-sidecar-injector", "namespace" : "istio-system"}})
---
data:
  #@overlay/replace via=lambda a,_: json.encode(overlay.apply(json.decode(a), remove_proxy_init_resources()))
  values:

#@ end
