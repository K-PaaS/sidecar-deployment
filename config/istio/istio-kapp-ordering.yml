#@ load("@ytt:overlay", "overlay")

#@ kind_deployment = overlay.subset({"kind":"Deployment"})
#@ kind_replica_set = overlay.subset({"kind":"ReplicaSet"})
#@ kind_stateful_set = overlay.subset({"kind":"StatefulSet"})
#@ kind_daemon_set = overlay.subset({"kind":"DaemonSet"})
#@ kind_job = overlay.subset({"kind":"Job"})
#@ contains_pod = overlay.or_op(kind_deployment, kind_replica_set, kind_stateful_set, kind_daemon_set, kind_job)

#@ namespaced = lambda idx,old,new: "namespace" in old["metadata"]
#@ not_inside_istio_ns = overlay.not_op(overlay.subset({"metadata":{"namespace":"istio-system"}}))
#@ not_upgrade_sidecar = overlay.not_op(overlay.subset({"metadata":{"namespace": "cf-workloads", "annotations": {"kapp.k14s.io/change-group": "cf-for-k8s.cloudfoundry.org/upgrade-istio-sidecars"}}}))

#@overlay/match by=overlay.and_op(contains_pod, namespaced, not_inside_istio_ns, not_upgrade_sidecar), expects="1+"
---
metadata:
  #@overlay/match missing_ok=True
  annotations:
    #@overlay/match missing_ok=True
    kapp.k14s.io/change-rule.istio-sidecar-injector: "upsert after upserting cf-for-k8s.cloudfoundry.org/istio-sidecar-injector"
    #@overlay/match missing_ok=True
    kapp.k14s.io/change-rule.upgrade-istio-sidecars: "upsert before upserting cf-for-k8s.cloudfoundry.org/upgrade-istio-sidecars"

#! Because the istio sidecar injector is a mutatingwebhook on pod create, we need to guarantee its creation before we start creating pods
#! in cf namespaces. Similarly, because the istio sidecars may be incompatible across versions of istio, ensure that all pods are rerolled
#! once the new sidecar injector is available.

#@overlay/match by=overlay.subset({"kind": "MutatingWebhookConfiguration", "metadata":{"name": "istio-sidecar-injector"}})
---
metadata:
  #@overlay/match missing_ok=True
  annotations:
    #@overlay/match missing_ok=True
    kapp.k14s.io/change-group: cf-for-k8s.cloudfoundry.org/istio-sidecar-injector
